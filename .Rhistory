## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## The following is a pair of functions that cache and compute the
## inverse of a matrix.
## This function creates a special "matrix" object
## that can cache its inverse.
makeCacheMatrix <- function(mtx = matrix()) {
inverse <- NULL
set <- function(x) {
mtx <<- x;
inverse <<- NULL;
}
get <- function() return(mtx);
setinv <- function(inv) inverse <<- inv;
getinv <- function() return(inverse);
return(list(set = set, get = get, setinv = setinv, getinv = getinv))
}
## Write a short comment describing this function
## This function computes the inverse of the special
## "matrix" returned by `makeCacheMatrix` above. If the inverse has
## already been calculated (and the matrix has not changed), then
## `cacheSolve` should retrieve the inverse from the cache.
cacheSolve <- function(mtx, ...) {
inverse <- mtx$getinv()
if(!is.null(inverse)) {
message("Getting cached data...")
return(inverse)
}
data <- mtx$get()
invserse <- solve(data, ...)
mtx$setinv(inverse)
return(inverse)
}
cd
pwd
setwd(/ProgrammingAsignment2)
setwd(ProgrammingAsignment2)
setwd()
setwd("ProgrammingAsignment2")
setwd("/ProgrammingAsignment2")
setwd("/media/Data1/Dropbox/datascience/rporgramming/ProgrammingAsignment2")
getwd()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## The following is a pair of functions that cache and compute the
## inverse of a matrix.
## This function creates a special "matrix" object
## that can cache its inverse.
makeCacheMatrix <- function(mtx = matrix()) {
inverse <- NULL
set <- function(x) {
mtx <<- x;
inverse <<- NULL;
}
get <- function() return(mtx);
setinv <- function(inv) inverse <<- inv;
getinv <- function() return(inverse);
return(list(set = set, get = get, setinv = setinv, getinv = getinv))
}
## Write a short comment describing this function
## This function computes the inverse of the special
## "matrix" returned by `makeCacheMatrix` above. If the inverse has
## already been calculated (and the matrix has not changed), then
## `cacheSolve` should retrieve the inverse from the cache.
cacheSolve <- function(mtx, ...) {
inverse <- mtx$getinv()
if(!is.null(inverse)) {
message("Getting cached data...")
return(inverse)
}
data <- mtx$get()
invserse <- solve(data, ...)
mtx$setinv(inverse)
return(inverse)
}
makeCacheMatrix()
makeCacheMatrix(2)
source(cachematrix.R)
source("cachematrix.R")
makeCacheMatrix()
a <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
# print(x[i, j])
}
}
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
# print(x[i, j])
}
}
x
makeCacheMatrix(x)
mtx
makeCacheMatrix <- function(mtx = matrix()) {
inverse <- NULL
set <- function(x) {
mtx <<- x;
inverse <<- NULL;
}
get <- function() return(mtx);
setinv <- function(inv) inverse <<- inv;
getinv <- function() return(inverse);
return(list(set = set, get = get, setinv = setinv, getinv = getinv))
}
## Write a short comment describing this function
## This function computes the inverse of the special
## "matrix" returned by `makeCacheMatrix` above. If the inverse has
## already been calculated (and the matrix has not changed), then
## `cacheSolve` should retrieve the inverse from the cache.
cacheSolve <- function(mtx, ...) {
inverse <- mtx$getinv()
if(!is.null(inverse)) {
message("Getting cached data...")
return(inverse)
}
data <- mtx$get()
invserse <- solve(data, ...)
mtx$setinv(inverse)
return(inverse)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(z) {
x <<- z
m <<- NULL
}
get <- function() x
setsolution <- function(solution) m <<- solution
getsolution <- function() m
list(
set = set,
get = get,
setsolution = setsolution,
getsolution = getsolution)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolution()
if (!is.null(m)) {
message("retrieving cached data")
return(m)
}
data <- x$get()
m <- solution(data, ...)
x$setsolution(m)
m
}
x
makeCacheMatrix()
